#!/usr/bin/ruby

require 'matrix'

def parse_image(i)
	Matrix[*
		i.each_line.map do |l|
			l.chomp.each_char.map do |c|
				c
			end
		end
	]
end

image = parse_image(".#.\n..#\n###")

def flip_x(m)
	Matrix.columns(m.column_vectors.reverse)
end

def flip_y(m)
	Matrix.rows(m.row_vectors.reverse)
end

def rotate(m)
	Matrix.columns(m.transpose.column_vectors.reverse)
end

transforms = DATA.readlines.flat_map do |l|
	before, after = l.chomp.split(' => ', 2).map { |p| Matrix[*p.split('/').map(&:chars)] }

	[
		before,
		flip_x(before),
		flip_y(before),
		rotate(before),
		rotate(flip_y(before)),
		rotate(flip_x(before)),
		rotate(rotate(before)),
		rotate(rotate(rotate(before))),
	].map {|b| [b, after] }
end.to_h

def each_square(m, s)
	return enum_for(__method__, m, s) unless block_given?

	ms = m.row_count

	0.upto(ms / s - 1) do |y|
		0.upto(ms / s - 1) do |x|
			sq = Matrix.build(s) do |i,j|
				m[x*s+i, y*s+j]
			end
			yield sq
		end
	end
end

def stitch_squares(sqs)
	size = sqs.size.**(0.5).to_i
	Matrix.vstack(*sqs.each_slice(size).map { |r| Matrix.hstack(*r) })
end

19.times do |i|
	puts image.to_a.flatten.count('#') if i == 5 or i == 18
	size = image.row_count % 2 == 0 ? 2 : 3
	image = stitch_squares(each_square(image, size).map {|s| transforms.fetch(s) })
end

__END__
../.. => ###/.##/#..
#./.. => #.#/..#/#..
##/.. => ###/.#./###
.#/#. => ##./###/...
##/#. => ##./###/#.#
##/## => #.#/#.#/###
.../.../... => #.#./#..#/#.##/#.#.
#../.../... => #.##/.##./#..#/.###
.#./.../... => #..#/#.#./.#../#.##
##./.../... => .#../...#/####/...#
#.#/.../... => ##.#/..#./...#/###.
###/.../... => #.#./#..#/####/##..
.#./#../... => ..##/..##/####/##.#
##./#../... => #.#./#.../..../##..
..#/#../... => .#.#/##.#/...#/####
#.#/#../... => .#../.###/.##./##.#
.##/#../... => ##../.#.#/#.../..##
###/#../... => ##.#/##.#/.###/##..
.../.#./... => ..#./..../##.#/#.#.
#../.#./... => ..##/.#.#/..#./###.
.#./.#./... => ...#/.#../.#.#/##..
##./.#./... => #..#/.###/##../#.#.
#.#/.#./... => ##.#/..#./.#../#..#
###/.#./... => #.#./####/#..#/#...
.#./##./... => ##../##.#/.###/##..
##./##./... => .#../####/.##./.#..
..#/##./... => ####/##.#/##.#/###.
#.#/##./... => .##./#.##/##.#/#...
.##/##./... => ..../#.##/##.#/##..
###/##./... => #.../.##./#.#./#...
.../#.#/... => #..#/..##/#.../#.##
#../#.#/... => ..##/..#./..#./..##
.#./#.#/... => ..##/####/####/....
##./#.#/... => ###./.#../##.#/#.#.
#.#/#.#/... => .##./#..#/..#./##..
###/#.#/... => ##.#/..#./#..#/...#
.../###/... => ..##/.#.#/#.../...#
#../###/... => ..##/#.##/#.#./..#.
.#./###/... => ##../..##/.##./...#
##./###/... => #.#./#.../#.../.##.
#.#/###/... => ##.#/..##/..##/.###
###/###/... => ..#./#..#/.#../.##.
..#/.../#.. => ###./#.#./#.##/#.##
#.#/.../#.. => ####/.##./#..#/.###
.##/.../#.. => #.#./..../..../##.#
###/.../#.. => .#.#/..../.#.#/###.
.##/#../#.. => ####/#..#/.##./####
###/#../#.. => ##../.#../..../###.
..#/.#./#.. => .###/##../#.##/...#
#.#/.#./#.. => ...#/####/#.../..#.
.##/.#./#.. => #.../####/.#.#/###.
###/.#./#.. => ####/..../.#../##..
.##/##./#.. => ..../###./##../.###
###/##./#.. => #.../#..#/#..#/###.
#../..#/#.. => ..../.###/.#../.#.#
.#./..#/#.. => .#.#/...#/#.#./##..
##./..#/#.. => .#../##.#/.#../.##.
#.#/..#/#.. => ##../#.##/.###/#.#.
.##/..#/#.. => #.#./..../.#.#/..##
###/..#/#.. => ...#/#.../...#/..#.
#../#.#/#.. => ##.#/..#./###./.###
.#./#.#/#.. => ..../##../.#.#/.###
##./#.#/#.. => ###./#.#./.#../.#.#
..#/#.#/#.. => ###./..../##.#/#..#
#.#/#.#/#.. => .#.#/#.##/#.../..#.
.##/#.#/#.. => .#.#/#.../##../####
###/#.#/#.. => #.##/..#./..##/....
#../.##/#.. => .#../.#../...#/#...
.#./.##/#.. => ##../#..#/###./##.#
##./.##/#.. => .#.#/#..#/..../#..#
#.#/.##/#.. => ##.#/..../##../##..
.##/.##/#.. => #.#./..#./#.../.#..
###/.##/#.. => #.#./##.#/####/....
#../###/#.. => ##../#.##/.#../.###
.#./###/#.. => #.../#.##/..../.#.#
##./###/#.. => ###./##../.#../..##
..#/###/#.. => ..#./.#../####/#..#
#.#/###/#.. => #.##/..#./..#./#.##
.##/###/#.. => .#../#.../####/#...
###/###/#.. => #.../..#./..../.##.
.#./#.#/.#. => .#.#/####/###./....
##./#.#/.#. => ##.#/###./#.##/#..#
#.#/#.#/.#. => ####/#.#./..../##..
###/#.#/.#. => ##.#/##../.###/..##
.#./###/.#. => .##./...#/##.#/.###
##./###/.#. => ..##/.#../..#./#...
#.#/###/.#. => ####/#.../..#./#.#.
###/###/.#. => #.../.###/..##/.#.#
#.#/..#/##. => ...#/###./#.#./#.##
###/..#/##. => ##../..#./###./##..
.##/#.#/##. => #.../#.#./#.#./#..#
###/#.#/##. => #.../##.#/#.#./....
#.#/.##/##. => ...#/#.#./...#/#...
###/.##/##. => .###/...#/#..#/###.
.##/###/##. => ###./.##./##.#/#..#
###/###/##. => #.../##../.###/.#..
#.#/.../#.# => #.../#..#/...#/#..#
###/.../#.# => .#../..##/.##./.#.#
###/#../#.# => ..../.#.#/###./#...
#.#/.#./#.# => ##.#/.#.#/#.##/...#
###/.#./#.# => ..../#.../#.../.###
###/##./#.# => ..##/.##./##.#/##.#
#.#/#.#/#.# => ..##/.#../..##/..#.
###/#.#/#.# => ..##/.###/...#/##..
#.#/###/#.# => ..#./.#.#/.###/####
###/###/#.# => #.#./##../#.#./##.#
###/#.#/### => #.#./..##/#.#./#...
###/###/### => ##../.###/###./#..#
